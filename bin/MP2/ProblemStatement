 Project 2: Skip lists

Project Description:

(a) Implement skip lists (see http://en.wikipedia.org/wiki/Skip_list).
(b) Compare its performance with Java's TreeMap.


(a) Implementation (80 points):
The skip list interface is given below:


/** See  http://en.wikipedia.org/wiki/Skip_list
 */

import java.lang.Comparable;
import java.util.Iterator;

public interface SkipList> {

    boolean add(T x);  // Add an element x to the list

    T ceiling(T x); // Least element that is >= x, or null if no such element

    boolean contains(T x);  // Is x in the list?

    T findIndex(int n);  // Return the element at index n in the list
			 // First element of list is at index 0

    T first();  // Return the first element of the list

    T floor(T x);  // Greatest element that is <= x, or null if no such element

    boolean isEmpty();  // Is the list empty?

    Iterator iterator();  // Returns an iterator for the list

    T last();  // Return the last element of the list

    void rebuild();  // Rebuild this list into a perfect skip list

    T remove(T x);  // Remove x from this list
		    // returns element removed, null if x is not in list

    int size();  // Number of elements in the list
}



Details of driver program and input/output specifications:

A driver program is provided that creates and modifies a skip list,
whose elements are of type Long.

The following operations are handled by the driver program.  The value
returned by each operation is accumulated in variable "result," and
its value is printed as the final output of the program.

a. Add x: Add new items to the skip list; contributes 1 to result.

b. Ceiling x: Find least element that is >= x; returned value is
   added to result, or 0 if no such element

c. FindIndex x: Find the element at the index position x; returned value
   is added to result (0 if there is no element in that index).
   Note that the first element of the list is at index 0.

d. First: Find the first element; value of returned element is added to result.

e. Last: Find the last element; value of returned element is added to result.

f. Floor x: Find the Greatest element that is <= x, returned value is
   added to result, or 0 if no such element.

g. Remove x: Remove x from this list; add 1 to result if x is in the list.

h. Contains x: Add 1 to result if x is in the list.


Finally the program outputs the contents of the variable "result"
(mod p, to avoid overflow) and the time taken. 



Summary: Implement the skip list, making sure you override all the methods
from the interface, without changing their signatures.


Sample input:
  Add 1
  Add 2
  Add 13
  First
  Last
  Ceiling 10
  Remove 1
  Remove 22
  End

Output:
  31

Explanation:
  Add 1 //returns 1
  Add 2 // returns 1
  Add 13 // returns 1
  First //returns 1
  Last // returns 13
  Ceiling 10 //returns 13
  Remove 1 //returns 1
  Remove 22 //returns 0
  End


(b) Comparison of Skip lists and tree maps (20 points):
Evaluate the performance of skip lists and tree maps on randomly generated
inputs, over the following operations:  Add, Contains, Remove.
